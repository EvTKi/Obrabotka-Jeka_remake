// src/components/AnalysisTab.tsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import React, { useState, useEffect } from 'react';
import { useApi } from '../hooks/useApi';
import { useFilePreview } from '../hooks/useFilePreview';
import { useAnalysisProcess } from '../hooks/useAnalysisProcess';
import { AnalysisRequest, ProcessRequest } from '../services/api';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–µ–∫—Ü–∏–π
import { FileUploadSection } from './sections/FileUploadSection';
import { FilePreviewSection } from './sections/FilePreviewSection';
import { SettingsSection } from './sections/SettingsSection';
import { ReplacementsSection } from './sections/ReplacementsSection';
import { AnalysisResultsSection } from './sections/AnalysisResultsSection';
import { ProcessStatus } from './ProcessStatus';

interface Replacement {
  old: string;
  new: string;
}

interface AnalysisTabProps {
  onDataProcessed: (data: any) => void;
}

const AnalysisTab: React.FC<AnalysisTabProps> = ({ onDataProcessed }) => {
  // –•—É–∫–∏ - —É–±–∏—Ä–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π analyzeFiles
  const { loading: apiLoading, error: apiError, clearError } = useApi();
  const { previews, loading: previewLoading, getFilePreview, clearPreview } = useFilePreview();
  const { processingState, analyzeData, processWithChoices, downloadResult } = useAnalysisProcess();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [surveyFile, setSurveyFile] = useState<File | null>(null);
  const [rolesFile, setRolesFile] = useState<File | null>(null);
  const [replacements, setReplacements] = useState<Replacement[]>([{ old: '', new: '' }]);
  const [analysisData, setAnalysisData] = useState<any>(null);
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø userChoices —Å–æ–≥–ª–∞—Å–Ω–æ ProcessRequest
  const [userChoices, setUserChoices] = useState<ProcessRequest['user_choices']>({
    TU: {},
    TV: {},
    IV: {}
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  const [settings, setSettings] = useState({
    controlCol: '',
    operationCols: [] as string[],
    roleCol: '',
    uidCol: ''
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
  useEffect(() => {
    if (apiError) {
      alert(`–û—à–∏–±–∫–∞: ${apiError}`);
      clearError();
    }
  }, [apiError, clearError]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∞–π–ª–æ–≤
  const handleSurveyFileChange = async (file: File | null) => {
    setSurveyFile(file);
    if (file) {
      await getFilePreview(file, 'survey');
    } else {
      clearPreview('survey');
      setSettings(prev => ({ ...prev, controlCol: '', operationCols: [] }));
    }
  };

  const handleRolesFileChange = async (file: File | null) => {
    setRolesFile(file);
    if (file) {
      await getFilePreview(file, 'roles');
    } else {
      clearPreview('roles');
      setSettings(prev => ({ ...prev, roleCol: '', uidCol: '' }));
    }
  };

  // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleAnalyze = async () => {
      if (!surveyFile || !rolesFile) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞');
        return;
      }

      if (!settings.controlCol || !settings.roleCol || !settings.uidCol || settings.operationCols.length === 0) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã');
        return;
      }

      const requestParams: AnalysisRequest = {
        control_col: settings.controlCol,
        operation_cols: settings.operationCols,
        role_col: settings.roleCol,
        uid_col: settings.uidCol,
        replacements: replacements.filter(rep => rep.old.trim() && rep.new.trim())
      };

      try {
        // –ü–ï–†–ï–î–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ï –§–ê–ô–õ–´ –í analyzeData
        const result = await analyzeData(surveyFile, rolesFile, requestParams);
        setAnalysisData(result);
      } catch (error) {
        console.error('Analysis error:', error);
      }
    };

  const handleProcess = async () => {
    if (!analysisData) return;

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø —Å–æ–≥–ª–∞—Å–Ω–æ ProcessRequest
    const processRequest: ProcessRequest = {
      analysis_data: analysisData,
      user_choices: userChoices // –¢–µ–ø–µ—Ä—å —Ç–∏–ø —Å–æ–≤–º–µ—Å—Ç–∏–º
    };

    try {
      const result = await processWithChoices(processRequest);
      onDataProcessed({
        ...result,
        status: 'completed'
      });
    } catch (error) {
      console.error('Processing error:', error);
    }
  };

  const handleDownload = async (processId: string) => {
    try {
      await downloadResult(processId);
    } catch (error) {
      console.error('Download error:', error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è userChoices
  const handleUserChoiceChange = (newUserChoices: ProcessRequest['user_choices']) => {
    setUserChoices(newUserChoices);
  };

  return (
    <div className="analysis-tab">
      {/* –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ */}
      <FileUploadSection
        surveyFile={surveyFile}
        rolesFile={rolesFile}
        onSurveyFileChange={handleSurveyFileChange}
        onRolesFileChange={handleRolesFileChange}
        previewLoading={previewLoading}
      />

      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã */}
      {surveyFile && rolesFile && (
        <>
          {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤ */}
          <FilePreviewSection
            surveyFile={surveyFile}
            rolesFile={rolesFile}
            previews={previews}
          />

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ */}
          <SettingsSection
            settings={settings}
            onSettingsChange={setSettings}
            previews={previews}
          />

          {/* –ó–∞–º–µ–Ω—ã */}
          <ReplacementsSection
            replacements={replacements}
            onReplacementsChange={setReplacements}
          />

          {/* –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ */}
          <div className="streamlit-section">
            <h3>üìà –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏</h3>
            <ProcessStatus
              status={processingState.status}
              error={processingState.error}
              processId={processingState.processId}
              onDownload={handleDownload}
            />
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ */}
          <div className="action-section">
            <button 
              onClick={handleAnalyze}
              disabled={apiLoading || !settings.controlCol || !settings.roleCol || !settings.uidCol || settings.operationCols.length === 0}
              className={`streamlit-button primary ${apiLoading ? 'loading' : ''}`}
            >
              {apiLoading ? 'üîç –ê–Ω–∞–ª–∏–∑...' : 'üîç –ê–Ω–∞–ª–∏–∑ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è'}
            </button>
          </div>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ */}
          {analysisData && (
            <AnalysisResultsSection
              analysisData={analysisData}
              userChoices={userChoices}
              onUserChoice={handleUserChoiceChange}
              onProcess={handleProcess}
            />
          )}
        </>
      )}
    </div>
  );
};

export default AnalysisTab;