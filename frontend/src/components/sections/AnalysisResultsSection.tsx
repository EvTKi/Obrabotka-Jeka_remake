// src/components/sections/AnalysisResultsSection.tsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import React from 'react';
import { ProcessRequest } from '../../services/api';
import './AnalysisResultsSection.css';

interface AnalysisResultsSectionProps {
  analysisData: any;
  userChoices: ProcessRequest['user_choices'];
  onUserChoice: (choices: ProcessRequest['user_choices']) => void;
  onProcess: () => void;
}

export const AnalysisResultsSection: React.FC<AnalysisResultsSectionProps> = ({
  analysisData,
  userChoices,
  onUserChoice,
  onProcess
}) => {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ç–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  const getAnalysisTableData = (category: 'TU' | 'TV' | 'IV') => {
    if (!analysisData) return [];

    const autoMatches = analysisData.auto_matches[category] || [];
    const pendingMatches = analysisData.pending_matches[category] || [];

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const autoRows = autoMatches.map((match: any) => ({
      value: match.original,
      role: match.matched,
      found: true,
      type: match.type,
      uid: match.uid
    }));

    // –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const pendingRows = pendingMatches.map((match: any) => ({
      value: match.original,
      role: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
      found: false,
      type: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
      candidates: match.candidates
    }));

    return [...autoRows, ...pendingRows];
  };

  const handleUserChoice = (category: 'TU' | 'TV' | 'IV', original: string, selectedRole: string) => {
    const newChoices = {
      ...userChoices,
      [category]: {
        ...userChoices[category],
        [original]: selectedRole
      }
    };
    onUserChoice(newChoices);
  };

  const hasPendingMatches = analysisData.pending_matches && 
    Object.values(analysisData.pending_matches).some((arr: any) => arr.length > 0);

  return (
    <div className="streamlit-section">
      <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h3>
      <p>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ:</p>
      
      <div className="analysis-columns">
        {(['TU', 'TV', 'IV'] as const).map(category => (
          <div key={category} className="analysis-column">
            <h4>
              {category === 'TU' && 'üîπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–¢–£)'}
              {category === 'TV' && 'üîπ –í–µ–¥–µ–Ω–∏–µ (–¢–í)'}
              {category === 'IV' && 'üîπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ (–ò–í)'}
            </h4>
            <div className="analysis-table">
              <table>
                <thead>
                  <tr>
                    <th>–ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</th>
                    <th>–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è —Ä–æ–ª—å</th>
                    <th>–ù–∞–π–¥–µ–Ω–æ</th>
                    <th>–¢–∏–ø</th>
                  </tr>
                </thead>
                <tbody>
                  {getAnalysisTableData(category).map((item: any, index) => (
                    <tr 
                      key={index} 
                      className={
                        item.found ? 'streamlit-match-exact' : 
                        item.candidates ? 'streamlit-match-suggested' : 'streamlit-match-none'
                      }
                    >
                      <td>{item.value}</td>
                      <td>{item.role}</td>
                      <td>{item.found ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</td>
                      <td>{item.type}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        ))}
      </div>

      {/* –í—ã–±–æ—Ä —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π */}
      {hasPendingMatches && (
        <div className="streamlit-section">
          <h3>ü§î –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π</h3>
          <p>–ù–∞–π–¥–µ–Ω—ã –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:</p>
          
          {(['TU', 'TV', 'IV'] as const).map(category => (
            analysisData.pending_matches[category]?.length > 0 && (
              <div key={category} className="matching-section">
                <h4>
                  {category === 'TU' && 'üîπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–¢–£)'}
                  {category === 'TV' && 'üîπ –í–µ–¥–µ–Ω–∏–µ (–¢–í)'}
                  {category === 'IV' && 'üîπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ (–ò–í)'}
                </h4>
                {analysisData.pending_matches[category].map((match: any, index: number) => (
                  <div key={index} className="streamlit-match-suggested match-option">
                    <div className="match-original">
                      <strong>–ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</strong> {match.original}
                    </div>
                    <div className="match-candidates">
                      {match.candidates.map((candidate: any, candIndex: number) => (
                        <label key={candIndex} className="candidate-option">
                          <input 
                            type="checkbox"
                            checked={userChoices[category]?.[match.original] === candidate.role_name}
                            onChange={() => handleUserChoice(category, match.original, candidate.role_name)}
                          />
                          <span className="candidate-text">
                            ‚úÖ {candidate.role_name} ({candidate.score}% —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
                          </span>
                        </label>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            )
          ))}
          
          <button 
            onClick={onProcess}
            className="streamlit-button primary confirm-button"
          >
            ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
          </button>
        </div>
      )}

      {/* –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ */}
      {!hasPendingMatches && analysisData && (
        <div className="action-section">
          <button 
            onClick={onProcess}
            className="streamlit-button primary"
          >
            ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –≤—ã–±–æ—Ä–∞
          </button>
        </div>
      )}
    </div>
  );
};