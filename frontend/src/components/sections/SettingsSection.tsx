// src/components/sections/SettingsSection.tsx
import React from 'react';
import { ColumnSelector } from '../ColumnSelector';
import './SettingsSection.css';

interface Settings {
  controlCol: string;
  operationCols: string[];
  roleCol: string;
  uidCol: string;
}

interface SettingsSectionProps {
  settings: Settings;
  onSettingsChange: (settings: Settings) => void;
  previews: {
    survey?: { columns: string[] };
    roles?: { columns: string[] };
  };
}

export const SettingsSection: React.FC<SettingsSectionProps> = ({
  settings,
  onSettingsChange,
  previews
}) => {
  const handleControlColChange = (cols: string[]) => {
    onSettingsChange({ ...settings, controlCol: cols[0] || '' });
  };

  const handleOperationColsChange = (cols: string[]) => {
    onSettingsChange({ ...settings, operationCols: cols });
  };

  const handleRoleColChange = (cols: string[]) => {
    onSettingsChange({ ...settings, roleCol: cols[0] || '' });
  };

  const handleUidColChange = (cols: string[]) => {
    onSettingsChange({ ...settings, uidCol: cols[0] || '' });
  };

  return (
    <div className="streamlit-section">
      <h3>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏</h3>
      
      <div className="settings-section">
        <h4>üîπ –°—Ç–æ–ª–±—Ü—ã –ø–µ—Ä–µ—á–Ω—è</h4>
        <div className="settings-columns">
          {previews.survey && (
            <ColumnSelector
              columns={previews.survey.columns}
              selectedColumns={[settings.controlCol]}
              onColumnsChange={handleControlColChange}
              label="–°—Ç–æ–ª–±–µ—Ü —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
              helpText="–°—Ç–æ–ª–±–µ—Ü —Å –ø—Ä–∏–∑–Ω–∞–∫–æ–º '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'"
              multiple={false}
            />
          )}
          {previews.survey && (
            <ColumnSelector
              columns={previews.survey.columns.filter(col => col !== settings.controlCol)}
              selectedColumns={settings.operationCols}
              onColumnsChange={handleOperationColsChange}
              label="–°—Ç–æ–ª–±—Ü—ã –≤–µ–¥–µ–Ω–∏—è:"
              helpText="–°—Ç–æ–ª–±—Ü—ã —Å –ø—Ä–∏–∑–Ω–∞–∫–æ–º '–í–µ–¥–µ–Ω–∏–µ' (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)"
              multiple={true}
            />
          )}
        </div>

        <h4>üîπ –°—Ç–æ–ª–±—Ü—ã —Ä–æ–ª–µ–π</h4>
        <div className="settings-columns">
          {previews.roles && (
            <ColumnSelector
              columns={previews.roles.columns}
              selectedColumns={[settings.roleCol]}
              onColumnsChange={handleRoleColChange}
              label="–°—Ç–æ–ª–±–µ—Ü —Ä–æ–ª–µ–π:"
              helpText="–°—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º —Ä–æ–ª–∏"
              multiple={false}
            />
          )}
          {previews.roles && (
            <ColumnSelector
              columns={previews.roles.columns.filter(col => col !== settings.roleCol)}
              selectedColumns={[settings.uidCol]}
              onColumnsChange={handleUidColChange}
              label="–°—Ç–æ–ª–±–µ—Ü UID:"
              helpText="–°—Ç–æ–ª–±–µ—Ü —Å UID —Ä–æ–ª–∏"
              multiple={false}
            />
          )}
        </div>
      </div>
    </div>
  );
};